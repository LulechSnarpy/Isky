<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
		<!--
			1.配置数据源 
		 		加载资源文件     数据库 -->
		<context:property-placeholder location="classpath:jdbc.properties"/>
		
		<!--   	阿里druid 数据库配置 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
			<property name="url" value="${datasource.url}" />  
         <property name="driverClassName" value="${datasource.driverClassName}" /> 
         <property name="username" value="${datasource.username}" />  
         <property name="password" value="${datasource.password}" /> 
          
         <property name="filters" value="${druid.filters}" />  
         <property name="maxActive" value="${druid.maxActive}" />
         <property name="initialSize" value="${druid.initialSize}" />
         <property name="maxWait" value="${druid.maxWait}" />
         <property name="minIdle" value="${druid.minIdle}" />  
         <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
         <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
         <property name="validationQuery" value="${druid.validationQuery}" />  
         <property name="testWhileIdle" value="${druid.testWhileIdle}" />  
         <property name="testOnBorrow" value="${druid.testOnBorrow}" />  
         <property name="testOnReturn" value="${druid.testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}" />
         <property name="removeAbandoned" value="${druid.removeAbandoned}" />
         <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
         <property name="logAbandoned" value="${druid.logAbandoned}" />
         <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		
		</bean>
		<!-- 使用什么持久性框架 -->
		<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- 设置(注入)数据源,注入数据源 -->
			<property name="dateSource" ref="dateSource"></property>
			<!-- 加载mybaties的配置文件,这个配置文件了 -->
			<property name="configLoaction" ref="classpath:mybaties.cfg.xml"/>
		</bean>
		
		<!--3. 扫描mapper接口 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer.class">
			<!-- 扫描接口，并实例化
			Mybatis MapperScannerConfigurer 
			自动扫描 将Mapper接口生成代理注入到SpringMybatis在与Spring集成的时候
			可以配置MapperFactoryBean来生成Mapper接口的代理 -->
			<property name="basePackage" value="com.**.mapper"></property>
		</bean>
		
		<!--spring声明式事务管理控制-->
		<!--4.配置事务管理器类-->
		<bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		<!-- 
		5.注解事务
			
			事务底层是使用aop环绕通知
			默认jdk代理proxy-target-class="false"
			   cglib代理 proxy-target-class="true"
			   会扫描所有@Transation注解，并通过cglib代理  通过tx事务管理器
		 -->
		<tx:annotation-driven proxy-target-class="true" transaction-manager="tx"/>
		
		
		
		
			
		
</beans>